#!/usr/bin/env ruby

require 'bundler/setup'
require_relative '../lib/log_error_handler'
require 'optparse'

options = {}
OptionParser.new do |opts|
  opts.banner = "Library for tracking logs and send notification, when error finded\n" \
                  "Usage: your_program_with_standard_stdout | log_error_handler\n" \
                  "OR: log_error_handler -l path_to_your_logfile\n\n\n"

  opts.on('-e', '--error_regexp=ERROR_REGEXP', Regexp, 'Defined regexp for detecting error.') do |ergxp|
    options[:error_regexp] = ergxp
  end

  opts.on('-t', '--tid_regexp=ERROR_REGEXP', Regexp, 'Defined regexp for detecting thread id.') do |tidrgxp|
    options[:tid_regexp] = tidrgxp
  end

  opts.on(
    '--not_modify_timeout=NOT_MODIFY_TIMEOUT',
    'Defined waiting timeout in seconds after last modifying, before close file.'
  ) do |t|
    options[:not_modify_timeout] = t.to_i
  end

  opts.on(
    '--log_file_tracker_waiting=LOG_FILE_TRACKER_WAITING',
    'Defined timeout in seconds before new cycle to review writed logfiles.'
  ) do |t|
    options[:log_file_tracker_waiting] = t.to_i
  end

  opts.on('--default', 'Show default config options') do
    LogErrorHandler::Tracker.new.options.each do |key, value|
      puts "#{key}: #{value}"
    end
    exit
  end

  opts.on('-f', '--file=FILE', 'Path to output file') do |path|
    options[:file] = path
  end

  opts.on('-u', '--url=URL', 'URL for send error messages') do |url|
    options[:uri] = URI(url)
  end

  opts.on('-m', '--http_method=HTTP_METHOD', 'HTTP method for send error messages') do |http_method|
    options[:http_method] = http_method
  end

  opts.on('-k', '--key=KEY', 'Key for send error messages') do |key|
    options[:key] = key
  end

  opts.on('-p', '--additional_params=ADDITIONAL_PARAMS', Hash, 'Additional params for send error message.') do |hash|
    options[:additional_params] = hash
  end

  opts.on('-l', '--log_file=LOG_FILE', 'Path to your log file') do |path|
    options[:log_file] = path
  end

  opts.on_tail('-h', '--help', 'Show this message') do
    puts opts
    exit
  end
end.parse!

LogErrorHandler::Tracker.start(options)
